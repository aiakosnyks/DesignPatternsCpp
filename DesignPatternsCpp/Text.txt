-Abstract Factory Interface: This interface defines a set of methods for creating various abstract product types. Each method in the interface
corresponds to a different product family.
-Concrete Factories: Concrete factory classes implement the Abstract Factory interface. Each concrete factory is responsible for creating a
specific family of related products.
-Abstract Product Interfaces: These interfaces define the structure and behavior of the product objects created by the factory. Each product
family has its set of abstract product interfaces.
-Concrete Products: Concrete product classes implement the abstract product interfaces. These classes represent the actual objects that the
client code will use.
-Client: The client code works with the abstract factory and abstract product interfaces. It doesn’t need to know the concrete classes of
the products it uses. Instead, it relies on the factory to create compatible objects.

Note: The Abstract Factory Pattern is particularly useful in situations where we need to ensure that the products created by a factory are
consistent and work together.

Example:

In a GUI application, you might have different themes (e.g., light theme and dark theme) where each theme includes a set of related UI components
lie buttons, windows, dialogs, etc. Abstract Factory Pattern can be used to create UI components that are consistent with the selected theme without
the client code having to be aware of the specific theme or component implementations.

Implementation of the Abstract Factory Pattern in C++ Design Patterns
Let’s look at the example of the Abstract Factory Pattern in the context of creating different types of pizzas in a pizza restaurant.

Example:

We’ll have two styles of pizza: “New York” and “Chicago,” each with its own set of pizza types.

Step 1: We’ll define an abstract factory interface (PizzaFactory) with methods for creating different types of pizzas for different styles.
Step 2: We’ll create two concrete factories (NewYorkPizzaFactory and ChicagoPizzaFactory) implementing this interface and create corresponding New
York and Chicago style pizzas.
Step 3: We’ll create an abstract product interface (Pizza) that defines the methods that concrete pizzas must implement.Concrete pizza classes
(NewYorkCheesePizza, NewYorkPepperoniPizza, ChicagoCheesePizza, ChicagoPepperoniPizza) implement the abstract Pizza interface for each style.
The client code will create and prepare pizzas using the abstract factories and interact with them without needing to know the specific pizza
styles or implementations.

//Advantages of the Abstract Factory Pattern in C++ Design Patterns

+Consistency: It ensures that objects created by a factory are compatible and consistent within a family, improving the overall system’s integrity.
+Flexibility: The pattern allows for the easy addition of new product families or variations without modifying existing client code.
+Encapsulation: Concrete classes are encapsulated within their respective factories, reducing dependencies and making it easier to manage changes.

//Disadvantages of the Abstract Factory Pattern in C++ Design Patterns

+Complexity: Implementing the pattern can lead to a large number of classes and interfaces, potentially increasing code complexity.
+Rigidity: Modifying or extending a product family may require changes in multiple places, making the system less flexible.
+Runtime Costs: Creating objects through factories can introduce some runtime overhead, although it’s usually negligible.
